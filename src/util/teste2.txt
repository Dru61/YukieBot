const Discord = require('discord.js');
const YouTube = require('simple-youtube-api');
const youtube = new YouTube(process.env.YOUTUBE_API_KEY)
const ytdl = require('ytdl-core');
//const search = require('yt-search')

const run = async(yukie, message, args, data) => {
    const s = args.join(' ')
    
    if (message.author.id !== data.ownerID) return;
    const queue = yukie.queues.get(message.guild.id)
    try {
        const video = s.match(/https:\/\/www.youtube.com\/watch\?v=/g)
        const playlist = s.match(/https:\/\/www.youtube.com\/playlist\?list=/g)
        if (playlist) {
            youtube.getPlaylist(s).then(p => {
                p.getVideos().then(r => {
                    r.map(r => {
                        const song = { url: 'https://www.youtube.com/watch?v='+r.id }
                        if (queue) {
                            queue.songs.push(song);
                            yukie.queues.set(message.guild.id, queue);
                        } else return playSong(yukie, message, song);
                    })
                })
            })
        };
        if (video) {
            youtube.getVideo(s).then(song => {
                if (queue) {
                    queue.songs.push(song);
                    yukie.queues.set(message.guild.id, queue);
                } else return playSong(yukie, message, song);
            }).catch(e => { return message.reply('este url é inválido!')})
        } 
        if (!video && !playlist) {
            youtube.searchVideos(s, 10).then(r => {
                if (!r) return message.channel.send('Desculpe, não encontrei nenhuma música com esse nome!')
                const song = r[0]
                if (queue) {
                    queue.songs.push(song);
                    yukie.queues.set(message.guild.id, queue);
                } else return playSong(yukie, message, song);
            }).catch(O_o => { message.channel.send('<@!'+message.author+`> desculpe, não achei nenhuma música com esse nome!`)})
        } 
    } catch (e) {
        console.log(e)
    }
}
const playSong = async (yukie, message, song) => {
    let queue = yukie.queues.get(message.member.guild.id);

    if (!song) {
      if (queue) {
        queue.connection.disconnect()
        return yukie.queues.delete(message.member.guild.id)
      }
    };
    if (queue && message.guild.me.voice.channel === null) {
      await yukie.queues.delete(message.member.guild.id)
    };
    if (!queue) {
      const conn = await message.member.voice.channel.join();
      queue = {
        volume: 5,
        connection: conn,
        dispatcher: null,
        songs: [song],
      };
    };
    queue.dispatcher = await queue.connection.play(
      await ytdl(song.url, { highWaterMark: 1 << 25, filter: 'audioonly' }),
      /*{
        type: 'opus',
      }*/
    )
    .on("finish", () => {
      queue.songs.shift();
      playSong(yukie, message, queue.songs[0]);
    });
    yukie.queues.set(message.member.guild.id, queue);
}
module.exports = {
    aliase: 'p',
    help: '',
    run,
}
